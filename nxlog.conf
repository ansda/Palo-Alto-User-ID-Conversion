## reference docs online at http://nxlog.org/docs/
## Please set the ROOT to the folder your nxlog was installed into,
## otherwise it will not start.

define ROOT C:\Program Files (x86)\nxlog
Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log

<Extension syslog>
    Module xm_syslog
</Extension>

<Extension json>
    Module xm_json
</Extension>

<Extension xml>
	Module xm_xml
</Extension>

<Extension fileop>
   Module xm_fileop
</Extension>

<Input internal>
    Module im_internal
	Exec $EventReceivedTime = integer($EventReceivedTime) / 1000000; to_xml();
    Exec $Message = to_xml(); 
</Input>

<Input tcp_in>
    Module	im_tcp
    Host	0.0.0.0
    Port	1514
	Exec $raw_event =~ s/[-]+(?=[^<>]*>)//g;
	Exec parse_xml();
	Exec if $FramedIPAddress =~ /(\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b)/ $IpAddress = $0; else drop();
	Exec if $UserName =~ /host.*/ drop();
	Exec if $UserName !~ /.*@.*/ drop();
	Exec if $UserName =~ /(.*)@(.*)/ $UserName = ($2 + "\\" + $1);
	Exec $UPN = lc($UserName);
	#Exec log_info("1=> " + integer($EventReceivedTime) /1000000 + " User:" + $UserName + " Source:" + $IpAddress);
</Input>

<Processor pattern>
    Module	pm_pattern
    PatternFile %ROOT%\conf\patterndb.xml
</Processor>

<Input eventlog>
    Module  im_msvistalog
	PollInterval 1
    Query   <QueryList>\
                <Query Id="0">\
                    <Select Path="Security">*</Select>\
					<Select Path="ForwardedEvents">*</Select>\
                </Query>\
            </QueryList>
	Exec if $TargetUserName =~ /.*carpet.*/ log_info($EventTime + " EventID:" + $EventID + " " + $Hostname + " User:" + $TargetUserName + " Source:" + $IpAddress);
	Exec if not ($EventID == 4624 or $EventID == 4769 or $EventID == 4768 or $EventID == 4770) drop();
	Exec $raw_event = lc($raw_event);
	Exec if $TargetUserName =~ /(adm.*|svc.*|.*\$.*|(?i).*ANONYMOUS LOGON.*)/ drop();
	Exec $TargetUserName = lc($TargetUserName);
	Exec $TargetDomainName = lc($TargetDomainName);
	Exec if $IpAddress =~ /(\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b)/ $IpAddress = $0; else drop();
	Exec if $TargetUserName =~ /^([^@]*)/ $regexSAM = $0; else $regexSAM = $TargetUserName; to_xml();
	Exec if $TargetDomainName =~ /^([^.]*)/ $regexDOMAIN = $0; else $regexDOMAIN = $TargetDomainName; to_xml();
	Exec $DomSam = ($regexDOMAIN + "\\" + $regexSAM); to_xml();
	#Exec log_info($EventID + " Domain: " + $regexDOMAIN + " User: " + $regexSAM + " Domain\User: " + $DomSam + " TargetUserName: " + $TargetUserName + " IpAddress: " + $IpAddress);
	Exec $EventTime = integer($EventTime);
	Exec $raw_event = to_xml();
</Input>

<Output out_file>
    Module      om_file
    file        'L:\Logs\eventlog.txt'
	<Exec>
		$SourceName = 'nxlog';
		$SyslogSeverity = 'INFO';
		$SyslogFacility = 'AUDIT';
		$EventReceivedTime = integer($EventReceivedTime) / 1000000;
		$Message = ("User:" + $UPN + " Source:" + $IpAddress); to_syslog_bsd();
	</Exec>
    <Schedule>
        Every 1 min
		Exec  if (file_size('L:\Logs\eventlog.txt') >= 100M) file_cycle('L:\Logs\eventlog.txt', 2);
        Exec  out_file->reopen();
    </Schedule>
</Output>

<Output out_udp_local>
     Module      om_udp
     Host        127.0.0.1
     Port        514
	 <Exec>
		$SourceName = 'nxlog';
		$SyslogSeverity = 'INFO';
		$SyslogFacility = 'AUDIT';
		$EventReceivedTime = integer($EventReceivedTime) / 1000000;
		#if $UPN =~ /(.*carpett.*|.*dominguez.*)/ log_info("FOUND UPN: " + $UPN + " Source:" + $IpAddress + " " + $ServiceName);
		$Message = ("User:" + $UPN + " Source:" + $IpAddress); to_syslog_bsd();
	</Exec>
</Output>

<Output out_udp_remote>
     Module      om_udp
     Host        10.80.20.57
     Port        514
	 <Exec>
		$SourceName = 'nxlog';
		$SyslogSeverity = 'INFO';
		$SyslogFacility = 'AUDIT';
		$EventReceivedTime = integer($EventReceivedTime) / 1000000;
		#if $UPN =~ /(.*carpett.*|.*dominguez.*)/ log_info("FOUND UPN: " + $UPN + " Source:" + $IpAddress + " " + $ServiceName);
		$Message = ("User:" + $UPN + " Source:" + $IpAddress); to_syslog_bsd();
	</Exec>
</Output>

<Output out_json>
     Module      om_file
     file        'L:\Logs\eventlog.json'
	 <Exec>
		$SourceName = 'nxlog';
		$SyslogSeverity = 'INFO';
		$SyslogFacility = 'AUDIT';
		$EventReceivedTime = integer($EventReceivedTime) / 1000000; to_json();
	</Exec>
	<Schedule>
        Every 1 min
        Exec  if (file_size('L:\Logs\eventlog.json') >= 100M) file_cycle('L:\Logs\eventlog.json', 2);
        Exec  out_json->reopen();
    </Schedule>
</Output>

<Output out_json2>
     Module      om_file
     file        'L:\Logs\eventlogTCP.json'
	 Exec to_json();
	<Schedule>
        Every 1 min
        Exec  if (file_size('L:\Logs\eventlogTCP.json') >= 100M) file_cycle('L:\Logs\eventlogTCP.json', 2);
        Exec  out_json->reopen();
    </Schedule>
</Output>

<Route 1>
	Path        eventlog => pattern => out_udp_local,out_udp_remote,out_file,out_json
</Route>

<Route 2>
	Path        tcp_in => out_udp_local,out_udp_remote,out_json2
</Route>
